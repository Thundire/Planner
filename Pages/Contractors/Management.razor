@page "/contractors/management"

@inject ContractorsRepository ContractorsRepository

<PageTitle>Contractors</PageTitle>

<MudContainer Class="mt-4 mb-20">
	<MudPaper Class="px-4 py-4">
		<MudText Typo="Typo.h4">Contractor</MudText>
		<EditForm Model="Contractor" OnValidSubmit="StoreOrUpdate" class="max-w-2xl flex flex-col space-y-6">
			<div class="mb-1 text-red-500 text-sm">
				<DataAnnotationsValidator />
				<ValidationSummary />
			</div>
			
			<MudTextField T="string" @bind-Value="Contractor.Name" Label="Name" For="() => Contractor.Name" />

			<MudButtonGroup Class="mt-4" Variant="Variant.Outlined">
				<MudButton ButtonType="ButtonType.Submit">Save</MudButton>
				<MudButton ButtonType="ButtonType.Reset">Clear</MudButton>
			</MudButtonGroup>
		</EditForm>
	</MudPaper>
	
	
	<MudPaper Class="mt-12 px-4 py-4">
		<MudText Typo="Typo.h4">Contractors</MudText>
		
		<MudTable T="Contractor" Items="@Contractors" FixedHeader Dense OnRowClick="Select" Breakpoint="Breakpoint.None">
			<HeaderContent>
				<MudTh>Name</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Name">@context.Name</MudTd>
				<MudTd>
					<MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.Center">
						<MudIconButton Icon="@Icons.Material.Filled.Delete" @onclick="() => Destroy(context)" />
					</MudStack>
				</MudTd>
			</RowTemplate>
		</MudTable>
	</MudPaper>
</MudContainer>

@code
{
	private List<Contractor> Contractors { get; set; } = new();
	private Contractor Contractor { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Contractors = await ContractorsRepository.List();
	}

	private async Task StoreOrUpdate()
	{
		Contractor data = Contractor;
		var isCreating = Contractor.Id == 0;
		if (isCreating)
		{
			data.CreatedAt = DateTime.UtcNow;
		}
		else
		{
			data.UpdatedAt = DateTime.UtcNow;
		}

		var saved = await ContractorsRepository.StoreOrUpdate(data);

		if (isCreating)
		{
			Clear();
			Contractors.Insert(0, saved);
		}
		else
		{
			var existed = Contractors.FirstOrDefault(x => x.Id == saved.Id);
			existed?.Copy(saved);
		}
	}

	private async Task Destroy(Contractor entity)
	{
		await ContractorsRepository.Destroy(entity);
		Contractors.Remove(entity);
		if (Contractor == entity) Clear();
	}

	private void Clear()
	{
		Contractor = new();
	}

	private void Select(TableRowClickEventArgs<Contractor> args)
	{
		if(args.Item is not null)
			Contractor.Copy(args.Item);
	}
}
