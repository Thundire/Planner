@page "/profile/edit"
@attribute [Authorize]

@inject IDbContextFactory<DatabaseContext> Factory
@inject NavigationManager NavManager
@inject UsersService UsersService

<PageTitle>Edit Profile</PageTitle>

<section class="mx-auto max-w-6xl mb-20">
    <h1 class="text-2xl text-gray-800 font-bold mb-4">
        Profile
    </h1>
    <article class="bg-white shadow rounded-lg w-full my-12 p-6">
        <h2 class="text-xl font-medium mb-2">
            Profile Information
        </h2>
        <p class="text-gray-600">
            Update your account's profile information.
        </p>
        <EditForm Model="ProfileInformationForm" OnValidSubmit="SaveProfileInformation" class="max-w-2xl flex flex-col space-y-6">
            <div class="mb-1 text-red-500 text-sm">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div>
                <label for="name" class="block font-medium text-sm text-gray-700">Name</label>
                <div class="mt-1">
                    <InputText @bind-Value="ProfileInformationForm.Name" id="name" class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm block mt-1 w-full" />
                </div>
                <div class="mt-1 text-red-500 text-sm">
                    <ValidationMessage For="() => ProfileInformationForm.Name" />
                </div>
            </div>
            <div>
                <label for="email" class="block font-medium text-sm text-gray-700">Email address</label>
                <div class="mt-1">
                    <InputText @bind-Value="ProfileInformationForm.Email" type="email" id="email" class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm block mt-1 w-full" />
                </div>
                <div class="mt-1 text-red-500 text-sm">
                    <ValidationMessage For="() => ProfileInformationForm.Email" />
                    @if (!String.IsNullOrEmpty(_profileFormMessage))
                    {
                        @_profileFormMessage
                    }
                </div>
            </div>
            <div>
                <button type="submit" class="text-left px-4 py-2 bg-indigo-700 hover:bg-indigo-800 rounded-md font-semibold text-xs text-white uppercase tracking-widest focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition">
                    Save
                </button>
            </div>
        </EditForm>
    </article>
    <article class="bg-white shadow rounded-lg w-full my-12 p-6">
        <h2 class="text-xl font-medium mb-2">
            Update Password
        </h2>
        <p class="text-gray-600">
            Update your accounts current password.
        </p>
        <EditForm Model="PasswordForm" OnValidSubmit="UpdatePassword" class="max-w-2xl flex flex-col space-y-6">
            <div class="mb-1 text-red-500 text-sm">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div>
                <label for="current-password" class="block font-medium text-sm text-gray-700">Current Password</label>
                <div class="mt-1">
                    <InputText @bind-Value="PasswordForm.CurrentPassword" type="password" id="current-password" class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm block mt-1 w-full" />
                </div>
                <div class="mt-1 text-red-500 text-sm">
                    <ValidationMessage For="() => PasswordForm.CurrentPassword" />
                    @if (!String.IsNullOrEmpty(_passwordFormMessage))
                    {
                        @_passwordFormMessage
                    }
                </div>
            </div>
            <div>
                <label for="new-password" class="block font-medium text-sm text-gray-700">New Password</label>
                <div class="mt-1">
                    <InputText @bind-Value="PasswordForm.NewPassword" type="password" id="new-password" class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm block mt-1 w-full" />
                </div>
                <div class="mt-1 text-red-500 text-sm">
                    <ValidationMessage For="() => PasswordForm.NewPassword" />
                </div>
            </div>
            <div>
                <label for="confirm-password" class="block font-medium text-sm text-gray-700">Confirm Password</label>
                <div class="mt-1">
                    <InputText @bind-Value="PasswordForm.ConfirmPassword" type="password" id="confirm-password" class="border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm block mt-1 w-full" />
                </div>
                <div class="mt-1 text-red-500 text-sm">
                    <ValidationMessage For="() => PasswordForm.ConfirmPassword" />
                </div>
            </div>
            <div>
                <button type="submit" class="text-left px-4 py-2 bg-indigo-700 hover:bg-indigo-800 rounded-md font-semibold text-xs text-white uppercase tracking-widest focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition">
                    Save
                </button>
            </div>
        </EditForm>
    </article>
</section>

@code
{
    [CascadingParameter]
    public MainLayout? Layout { get; set; }
    private User? User => Layout?.User;
    private UpdateProfileModel ProfileInformationForm { get; set; } = new();
    private string _profileFormMessage = "";
    private UpdatePasswordModel PasswordForm { get; set; } = new();
    private string _passwordFormMessage = "";

	protected override void OnInitialized()
    {
        // get user profile
        ProfileInformationForm.Name = User!.Name;
        ProfileInformationForm.Email = User.Email;
    }

    private async Task SaveProfileInformation()
    {
        using var db = Factory.CreateDbContext();
        var currentUser = db.Users.Find(User!.Id);

        if (currentUser != null)
        {
            var existingUser = await UsersService.FindUserByEmailAsync(ProfileInformationForm.Email);

            if (existingUser != null && User.Id != existingUser.Id)
            {
                _profileFormMessage = "Email already in use.";
                return;
            }

            currentUser.Email = ProfileInformationForm.Email;
            currentUser.Name = ProfileInformationForm.Name;

            db.Users.Save(currentUser);
            StateHasChanged();
            NavManager.NavigateTo("profile/edit", true);
        }
    }

    private async Task UpdatePassword()
    {
        using var db = Factory.CreateDbContext();
        var existingUser = await UsersService.FindUserAsync(User!.Email, UsersService.GetSha256Hash(PasswordForm.CurrentPassword));

        if (existingUser == null)
        {
            _passwordFormMessage = "Current password was incorrect.";
            return;
        }

        existingUser.Password = UsersService.GetSha256Hash(PasswordForm.NewPassword);

        db.Users.Save(existingUser);
        StateHasChanged();
        NavManager.NavigateTo("profile/edit", true);
    }

    public class UpdateProfileModel
    {
        [Required]
        public string Name { get; set; } = default!;

        [EmailAddress(ErrorMessage = "Invalid email address.")]
        [Required(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = default!;
    }

    public class UpdatePasswordModel
    {
        [Required(ErrorMessage = "Current Password is required")]
        public string CurrentPassword { get; set; } = default!;

        [Required(ErrorMessage = "New Password is required")]
        public string NewPassword { get; set; } = default!;

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "The New Password and Confirm Password do not match.")]
        public string ConfirmPassword { get; set; } = default!;
    }
}
