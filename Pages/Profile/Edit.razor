@page "/profile/edit"
@attribute [Authorize]
@inject IDbContextFactory<DatabaseContext> Factory
@inject NavigationManager NavManager
@inject UsersService UsersService

<PageTitle>Edit Profile</PageTitle>

<MudContainer>
	<MudStack>
		<MudText Typo="Typo.h2">Profile</MudText>

		<MudPaper Class="pa-4" Elevation="2">
			<MudText Typo="Typo.h3">Profile Information</MudText>
			<MudText Typo="Typo.caption">Update your account's profile information.</MudText>

			<EditForm Model="ProfileInformationForm" OnValidSubmit="SaveProfileInformation">
				<DataAnnotationsValidator />

				<MudTextField T="string" Label="Name" @bind-Value="ProfileInformationForm.Name" For="() => ProfileInformationForm.Name" />

				<MudTextField T="string" Label="Email address" @bind-Value="ProfileInformationForm.Email" For="() => ProfileInformationForm.Email" InputType="InputType.Email" />
				<small>
					@if (!string.IsNullOrEmpty(_profileFormMessage))
					{
						@_profileFormMessage
					}
				</small>

				<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-2">Save</MudButton>
			</EditForm>
		</MudPaper>

		<MudPaper Class="mt-4 pa-4" Elevation="2">
			<MudText Typo="Typo.h3">Update Password</MudText>
			<MudText Typo="Typo.caption">Update your accounts current password.</MudText>

			<EditForm Model="PasswordForm" OnValidSubmit="UpdatePassword">
				<DataAnnotationsValidator />

				<MudTextField T="string" Label="Current Password" @bind-Value="PasswordForm.CurrentPassword" For="() => PasswordForm.CurrentPassword" InputType="InputType.Password" />
				<small>
					@if (!string.IsNullOrEmpty(_passwordFormMessage))
					{
						@_passwordFormMessage
					}
				</small>

				<MudTextField T="string" Label="New Password" @bind-Value="PasswordForm.NewPassword" For="() => PasswordForm.NewPassword" InputType="InputType.Password" />

				<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-2">Save</MudButton>
			</EditForm>
		</MudPaper>
	</MudStack>
</MudContainer>

@code {
	[CascadingParameter]
	public MainLayout? Layout { get; set; }
	private User? User => Layout?.User;
	private ProfileInformationFormVM ProfileInformationForm { get; } = new();
	private string _profileFormMessage = "";
	private PasswordFormVM PasswordForm { get; } = new();
	private string _passwordFormMessage = "";


	protected override void OnInitialized()
	{
		// get User profile
		ProfileInformationForm.Name = User!.Name;
		ProfileInformationForm.Email = User.Email;
	}

	private async Task SaveProfileInformation()
	{
		await using DatabaseContext db = await Factory.CreateDbContextAsync();
		User? currentUser = await db.Users.FindAsync(User!.Id);

		if (currentUser is null) return;

		User? existingUser = await UsersService.FindUserByEmailAsync(ProfileInformationForm.Email);

		if (existingUser is not null && User.Id != existingUser.Id)
		{
			_profileFormMessage = "Email already in use.";
			return;
		}

		currentUser.Email = ProfileInformationForm.Email;
		currentUser.Name = ProfileInformationForm.Name;

		db.Users.Save(currentUser);
		StateHasChanged();
		NavManager.NavigateTo("profile/edit", true);
	}

	private async Task UpdatePassword()
	{
		await using DatabaseContext db = await Factory.CreateDbContextAsync();
		User? existingUser = await UsersService.FindUserAsync(User!.Email, UsersService.GetSha256Hash(PasswordForm.CurrentPassword));

		if (existingUser is null)
		{
			_passwordFormMessage = "Current password was incorrect.";
			return;
		}

		existingUser.Password = UsersService.GetSha256Hash(PasswordForm.NewPassword);

		db.Users.Save(existingUser);
		StateHasChanged();
		NavManager.NavigateTo("profile/edit", true);
	}

	public class ProfileInformationFormVM
	{
		[Required]
		public string Name { get; set; } = string.Empty;

		[EmailAddress(ErrorMessage = "Invalid email address.")]
		[Required(ErrorMessage = "Please enter a valid email address")]
		public string Email { get; set; } = string.Empty;
	}

	public class PasswordFormVM
	{
		[Required(ErrorMessage = "Current Password is required")]
		public string CurrentPassword { get; set; } = string.Empty;

		[Required(ErrorMessage = "New Password is required")]
		public string NewPassword { get; set; } = string.Empty;
	}
}