@page "/dashboard"
@attribute [Authorize]
@inject GoalsRepository GoalsRepository
@inject ContractorsRepository ContractorsRepository

<PageTitle>Dashboard</PageTitle>

<section class="mx-auto max-w-6xl mb-20">
	<MudPaper Class="p-4">
		<MudForm Model="GoalFormModel" >
			<MudTextField T="string" Label="Name" @bind-Value="GoalFormModel.Name" Immediate Clearable Variant="Variant.Filled" Lines="2"/>
			<MudSelect T="Contractor" Label="Contractor" @bind-Value="GoalFormModel.Contractor" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
				<MudSelectItem Value="Contractor.Empty" />
				@foreach (var item in Contractors)
				{
					<MudSelectItem Value="item" />
				}
			</MudSelect>

			<MudTextField T="string" Label="Comment" @bind-Value="GoalFormModel.Comment" Clearable Lines="5" Variant="Variant.Filled" />

			<div class="mt-2">
				<MudButton Variant="Variant.Filled" OnClick="StoreOrUpdate">Save</MudButton>
				<MudButton Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
			</div>
		</MudForm>
	</MudPaper>
	
			<MudTable class="w-full my-12" T="Goal" Items="@Goals" Hover="true" Breakpoint="Breakpoint.Sm" OnRowClick="@Select">
			<ColGroup>
				<col style="width:300px;" />
				<col style="width:100px;" />
				<col />
				<col style="width:100px;" />
			</ColGroup>
			<HeaderContent>
				<MudTh></MudTh>
				<MudTh>ElapsedTime</MudTh>
				<MudTh>Name</MudTh>
				<MudTh>Contractor</MudTh>
				<MudTh></MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">Parts</MudButton></MudTd>
				<MudTd DataLabel="ElapsedTime">@context.ElapsedTime.ToString(@"hh\:mm")</MudTd>
				<MudTd DataLabel="Name">@context.Name.Clamp(100)</MudTd>
				<MudTd DataLabel="Contractor">@(context.Contractor?.Name ?? string.Empty)</MudTd>
				<MudTd>
						<MudButton @onclick="() => Destroy(context)">Delete</MudButton>
				</MudTd>
			</RowTemplate>
			<ChildRowContent>
				@if (context.ShowParts)
				{
					<MudTr>
						<td colspan="4">
							<MudCard Elevation="0">
								<MudCardContent Class="pa-0">
									<MudTable Items="@context.ElapsedTimeParts.Where(x=>context.ShowCollapsedParts || !x.Collapsed )" Context="Part" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
										<ColGroup>
											<col />
											<col />
											<col style="width:200px;" />
										</ColGroup>
										<HeaderContent>
											<MudTh>Elapsed time</MudTh>
											<MudTh>Comment</MudTh>
											<MudTh></MudTh>
										</HeaderContent>
										<RowTemplate>
											<MudTd DataLabel="Address Line 1">@Part.ElapsedTime.ToString(@"hh\:mm")</MudTd>
											<MudTd DataLabel="Address Line 2">@Part.Comment.Clamp(100)</MudTd>
											<MudTd>
												<MudButton @onclick="() => Destroy(Part)">Delete</MudButton>
											</MudTd>
										</RowTemplate>
									</MudTable>
								</MudCardContent>
							</MudCard>
						</td>
					</MudTr>
				}
			</ChildRowContent>
		</MudTable>
</section>

@code
{
	[CascadingParameter]
	public MainLayout? Layout { get; set; }
	public User? User => Layout?.User;

	private GoalEditForm GoalFormModel { get; set; } = new();
	public List<Goal> Goals { get; set; } = new();
	public string ContractorName { get; set; } = string.Empty;
	public List<Contractor> Contractors { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Contractors = await ContractorsRepository.List();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (User is null) return;
			Goals = await GoalsRepository.List(User);
			StateHasChanged();
		}
	}

	private async Task StoreOrUpdate()
	{
		var contractorFilled = GoalFormModel.Contractor is not null && GoalFormModel.Contractor.Id != Contractor.Empty.Id;
		Goal data = new()
		{
			Id = GoalFormModel.Id,
			Contractor = contractorFilled ? GoalFormModel.Contractor : null,
			Name = GoalFormModel.Name,
			Comment = GoalFormModel.Comment
		};

		var isCreating = GoalFormModel.Id == 0;
		

		if (isCreating)
		{
			data.User = User;
			data.CreatedAt = DateTime.UtcNow;
		}
		else
		{
			data.CreatedAt = GoalFormModel.Source!.CreatedAt;
			data.UpdatedAt = DateTime.UtcNow;
		}

		var saved = await GoalsRepository.StoreOrUpdate(data);

		if (isCreating)
		{
			Clear();
			Goals.Insert(0, saved);
		}
		else
		{
			var existed = Goals.FirstOrDefault(x => x.Id == saved.Id);
			if (existed is not null)
			{
				existed.Copy(saved, false, true);
				GoalFormModel.Fill(existed);
			}
		}
	}

	private async Task Destroy(Goal entity)
	{
		await GoalsRepository.Destroy(entity);
		Goals.Remove(entity);
		if (GoalFormModel.Id == entity.Id) Clear();
	}

	private void Clear()
	{
		GoalFormModel = new();
	}

	private void Select(TableRowClickEventArgs<Goal> args)
	{
		if(args.Item is not null) GoalFormModel.Fill(args.Item);
	}

	private void ShowBtnPress(Goal context)
	{
		context.ShowParts = !context.ShowParts;
	}

	private Task Destroy(GoalElapsedTimePart entity)
	{
		return null;
	}

	private class GoalEditForm
	{
		public Goal? Source { get; set; }
		public int Id { get; set; }
		public Contractor? Contractor { get; set; }
		public string Name { get; set; } = string.Empty;
		public string Comment { get; set; } = string.Empty;

		public void Fill(Goal data)
		{
			Id = data.Id;
			Contractor = data.Contractor;
			Name = data.Name;
			Comment = data.Comment;
			Source = data;
		}
	}
}
